;;
;; .sawfish/rc -- Sawfish window manager configuration file
;; Copyright 2008-2015 by Michal Nazarewicz
;;
;; This program is free software: you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;

(define sawfish-quit-cmd-file (getenv "SAWFISH_QUIT_CMD_FILE"))
(if sawfish-quit-cmd-file (unsetenv "SAWFISH_QUIT_CMD_FILE"))

;;{{{ What machine are we running

(defun screen-size ()
  "Screen resolution formatted as WIDTHxHEIGHT."
  (concat (number->string (screen-width)) "x" (number->string (screen-height))))

;;}}}
;;{{{ Helper

(require 'sawfish.wm.util.window-order)

(define (mn-run command)
  "Runs command asynchronously with a double fork to separate running
program from Sawfish process.

COMMAND is a string representing command to run.  It will be executed
via `system' function with additional ampersand at the end so that the
double fork followed by the middle process exiting happens."
  (format standard-error ">> %s\n" command)
  (system (concat command " & disown -a")))

(define (mn-run-unless regexp command #!optional current-vp)
  "Searches for window which WM_CLASS (formatted as %s/%s) matches
REGEXP.  If found returns this window otherwise runs COMMAND (in
background) and returns nil.

COMMAND is executed using `mn-run' function.

If current-vp is not-nil, will look only through windows in current
viewport.

Windows are matched in most recently focused first order."
  (catch 'done
    (mapc
     (lambda (w)
       (let ((cls (get-x-text-property w 'WM_CLASS)))
         (and cls
              (string-match regexp
                            (format nil "%s/%s"
                                    (and (> (length cls) 1) (aref cls 1))
                                    (aref cls 0)))
              (throw 'done w))))
     (window-order current-workspace t (not current-vp)))
    (mn-run command)
    ()))

(define (mn-warp-cursor-to-window-maybe wnd)
  "Warps cursor to centre of the window unless itâ€™s already under cursor."
  (unless (eq wnd (query-pointer-window))
    (let* ((pos (window-position wnd))
           (lft (car pos))
           (top (cdr pos))
           (dim (window-dimensions wnd))
           (rht (+ lft (car dim)))
           (btm (+ top (cdr dim))))
      (when (let ((pos (query-pointer)))
              ;; If WND is (or used to be) covered, `query-pointer-window'
              ;; returns window above it.  Check cursor position.
              (or (< (car pos) lft) (> (car pos) rht)
                  (< (cdr pos) top) (> (cdr pos) btm)))
        (setq lft (max lft 0) top (max top 0))
        (let ((dim (screen-dimensions)))
          (setq rht (min rht (car dim)) btm (min btm (cdr dim))))
        (warp-cursor (+ lft (quotient (- rht lft) 2))
                     (+ top (quotient (- btm top) 2)))
        (allow-events 'sync-both)))))

(define (mn-display-window wnd #!optional warp)
  "Displays and activates WND window.

Does what `display-window' does but fixes window not being
focused when viewport is changed and mouse is over another
window.

It also provides optional WARP argument.  If true, cursor will be
warped to the window even if no workspace or viewport change
happened."
  (when wnd
    (when (window-iconified-p wnd)
      (uniconify-window wnd))
    (unless (window-in-workspace-p wnd current-workspace)
      (setq warp t)
      (select-workspace
       (nearest-workspace-with-window wnd current-workspace) t))
    (when (window-outside-viewport-p wnd)
      (setq warp t)
      (move-viewport-to-window wnd))
    (when (window-get wnd 'shaded)
      (unshade-window w))
    (when warp
      (mn-warp-cursor-to-window-maybe wnd))
    (activate-window wnd)))

;;}}}
;;{{{ Misc

;; Show errors on screen and standard-error
(require 'sawfish.wm.ext.error-handler)
(setq error-destination 'both)

(write standard-error "Sawfish starting...\n")

;; Win key as prefix
(custom-set-typed-variable
 (quote wm-modifier-value) (quote (super)) (quote modifier-list))

;; Focus and Auto Raise
(require 'sawfish.wm.ext.auto-raise)
(setq focus-mode             'enter-only
      focus-click-through    t
      raise-windows-on-focus t
      raise-window-timeout   200)

;; Moving and resizing
(require 'sawfish.wm.commands.move-resize)
(setq move-show-position     t
      resize-show-dimensions t
      move-outline-mode      'box
      resize-outline-mode    'box
      move-snap-epsilon      5
      move-snap-mode         'magnetism)

(bind-keys window-keymap
           "W-Button2-Click"
           (lambda () (raise-lower-window-and-transients (input-focus)))
           "W-Button1-Move"
           (lambda () (move-window-interactively  (input-focus)))
           "W-Button3-Move"
           (lambda () (resize-window-interactively(input-focus))))

;; Viewports
(set-number-of-viewports 10 1)

; W-F<num> switches to viewport <num>-1
; W-<num> moves current window to viewport <num>-1
; expect <num> on dvorak are not numbers.
(do ((i 0 (1+ i)) (keys "&[{}(=*)+]"))
    ((= i (length keys)))
  (bind-keys global-keymap
             (concat "W-F" (number->string (1+ i)))
             (lambda () (set-screen-viewport i 0)))
  (bind-keys window-keymap
             (concat "W-" (elt keys i))
             (lambda () (set-window-viewport (input-focus) i 0))))

;;}}}
;;{{{ Transparency

(define default-window-alpha (cons 0.9 0.7))

(defconst window-alpha-max   #xffffffff)
(defconst window-alpha-min   #x1fffffff)

;; If alpha is a list then:
;; * if blur is nil     takes alpha's car,
;; * if blur is not nil takes alpha's cdr.
;; If now alpha is not a number returns `window-alpha-max'.
;; If alpha is within [0, 1] multiplies it by `window-alpha-max'
;; Returns (max `window-alpha-min' (min `window-alpha-max' alpha))
(defun window-alpha-value (alpha blur)
  (let ((a (if (listp alpha) (if blur (cdr alpha) (car alpha)) alpha)))
    (if (numberp a)
        (clamp (or (and (>= a 0) (<= a 1) (* a window-alpha-max)) a)
               window-alpha-min window-alpha-max)
      window-alpha-max)))

;; Return's window's alpha property or `default-window-alpha'
(defun window-alpha-property (w)
  (or (window-get w 'alpha) default-window-alpha))

;; Sets window opacity.
;; If alpha is nil uses `window-alpha-property'.
;; Uses `window-alpha-value' to get alpha value from alpha and blur arguments.
(defun set-window-alpha (w alpha #!optional blur)
  (let ((a (window-alpha-value (or alpha (window-alpha-property w)) blur)))
    (if (= a window-alpha-max)
        (delete-x-property (window-frame-id w) '_NET_WM_WINDOW_OPACITY))
    (set-x-property (window-frame-id w) '_NET_WM_WINDOW_OPACITY
                    (make-vector 1 a) 'CARDINAL 32))
  (sync-server))

(add-hook 'focus-in-hook  (lambda (w fmode) (set-window-alpha w nil nil)))
(add-hook 'focus-out-hook (lambda (w fmode) (set-window-alpha w nil t  )))

; If there are windows present when sawfish starts handle them properly,
; that's what after-add-window-hook is for, but after sawfish is
; started there is no longer need to keep this hook, so
; after-initialisation-hook removes the other hook.
(let ((f (lambda (w) (set-window-alpha w nil (not (eq (input-focus) w))))))
  (add-hook 'after-add-window-hook f)
  (add-hook 'after-initialization-hook
            (lambda () (remove-hook 'after-add-window-hook f))))

;;}}}
;;{{{ Applications, menus & bindings

(require 'sawfish.wm.menus)
(require 'sawfish.wm.customize)

(setq xterm-program    "term -N Term")
(define mn-mpdshow-command "term -N MPD -mesg -g 80x1 -e mpd-show")
(define mn-irssi-command   "term -N IRC -mesg -g 80x10 -e irssi")

;; Menus
(define (mn-quit command)
  (if sawfish-quit-cmd-file
      (let ((fd (open-file sawfish-quit-cmd-file 'write)))
        (write fd (concat command "\n"))
        (close-file fd)))
  (quit))

(setq root-menu
      (nconc
       '(("_Customize"    customize)
         ("_Restart"      restart)
         ("_Quit"         ("Yes" quit))
         ("Reboo_t"       ("Yes" (mn-quit "reboot"))))
       (and (file-exists-p "/usr/local/sbin/reboot-w")
            '(("_Windows" ("Yes" (mn-quit "reboot-w")))))
       '(("_Power Off"    ("Yes" (mn-quit "poweroff"))))))

;; Bindings
(bind-keys root-window-keymap
           "Button1-Click2"  (lambda () (mn-run xterm-program))
           "Button3-Click"    popup-root-menu)

(bind-keys window-keymap
           "W-Space"         (lambda () (popup-window-menu (input-focus)))
           "W-Return"        (lambda () (popup-window-menu (input-focus))))

(mapc
 (lambda (spec)
   (when (cdr spec)
     (bind-keys
      global-keymap
      (car spec)
      (let ((spec (cdr spec)))
        (if (listp spec)
            (lambda ()
              (mn-display-window (apply mn-run-unless spec)))
          (lambda ()
            (mn-run spec)))))))

 (let* ((home (getenv "HOME"))
        (libexec (concat home "/bin/libexec/"))
        (sh-maybe (lambda (dir fname #!optional args)
                    (let ((fname (concat dir fname)))
                      (if (file-exists-p fname)
                          (concat "/bin/sh " fname (or args "")))))))
   `(("W-;" "^Emacs/emacs$"  "e")
     ("W-." "/IRC$"          ,mn-irssi-command)
     ("W-a" "GIMP"           "gimp")
     ("W-o" "Geeqie"         "geeqie")

     ("W-l"                 . "xlocker")
     ("XF86ScreenSaver"     . "xlocker")
     ("W-\""                . "m rewind")
     ("XF86AudioPrev"       . "m rewind")
     ("W-'"                 . "m prev")
     ("W-j"                 . "m toggle")
     ("XF86AudioPlay"       . "m toggle")
     ("W-k"                 . "m next")
     ("XF86AudioNext"       . "m next")
     ("XF86AudioStop"       . "m stop")
     ("XF86AudioMute"       . "amixer set Master toggle")
     ("XF86Display"         . ,(sh-maybe home "/.xscreen-config"))
     ("XF86MonBrightnessUp"   . "xbacklight + 25")
     ("XF86MonBrightnessDown" . "xbacklight - 25"))))

(define (mn-get-browser)
  "Selects Opera, Firefox or Chrome window.

Switch to a web browser which currently doesnâ€™t hold input focus
prioritising windows as follows:

* non-iconified windows are preferred over iconified windows,
* windows on visible on current view-port are preferred over other windows and
* Opera is preferred over Firefox which is preferred over Chrome.

If no suitable windows is found and Opera is not running, start Opera.
"
  (let (found-opera wnds)
    (map-windows
     (lambda (wnd)
       (let (pri (cls (get-x-text-property wnd 'WM_CLASS)))
         (when (> (length cls) 1)
           (setq cls (format nil "%s/%s" (aref cls 1) (aref cls 0)))
           (cond ((string-match "^Opera(Next)?/opera$"        cls)
                  (setq pri 0 found-opera t))
                 ((string-equal "Firefox/Navigator"           cls)
                  (setq pri 1))
                 ((string-equal "Google-chrome/Google-chrome" cls)
                  (setq pri 2)))
           (when (and pri (not (memq (input-focus) (transient-group wnd))))
             (when (window-outside-viewport-p wnd)
               (setq pri (+ pri 10)))
             (when (window-iconified-p wnd)
               (setq pri (+ pri 100)))
             (setq wnds (cons (cons pri wnd) wnds)))))
       t))

    (if wnds
        (let ((wnd (cdar (sort wnds (lambda (x y) (< (car x) (car y)))))))
          (mn-display-window (or (last (transient-children wnd t)) wnd)))
      (unless found-opera (mn-run "opera")))))

(bind-keys global-keymap "W-," mn-get-browser)


(define (mn-get-term)
  "Selects terminal window in current view-port or starts a terminal.

Also wraps mouse to the centre of the window if not already above it."
  (let ((terms (delete-if-not
                (lambda (wnd)
                  (let ((cls (get-x-text-property wnd 'WM_CLASS)))
                    (and cls (string-equal "Term" (aref cls 0)))))
                (window-order current-workspace t))))
    (if (null terms)
        ;; No terminal windows, start a new one.

        (mn-run xterm-program)
      ;; If there are at least two terminal windows and the first one has
      ;; input focus, display the second one.  Otherwise, display the first
      ;; one.
      (let ((wnd (if (and (cdr terms) (eq (car terms) (input-focus)))
                     (cadr terms) (car terms))))
        (mn-display-window wnd t)))))

(bind-keys global-keymap "W-$" mn-get-term)


(require 'sawfish.wm.ext.run-application)
(setq run-application:y-position 'top)
(bind-keys global-keymap "W-r" 'run-application)

(let ((map (make-keymap)))
  (bind-keys map
             "'"   (lambda () (mn-run "amixer set Master  25%"))
             "W-'" (lambda () (mn-run "amixer set Master  30%"))
             "q"   (lambda () (mn-run "amixer set Master  35%"))
             "W-q" (lambda () (mn-run "amixer set Master  40%"))
             "j"   (lambda () (mn-run "amixer set Master  50%"))
             "W-j" (lambda () (mn-run "amixer set Master  60%"))
             "k"   (lambda () (mn-run "amixer set Master  65%"))
             "W-k" (lambda () (mn-run "amixer set Master  70%"))
             "x"   (lambda () (mn-run "amixer set Master  75%"))
             "W-x" (lambda () (mn-run "amixer set Master  80%")))
  (bind-keys global-keymap "W-x" map))

; Having Super-Tab bound seems to overwrite existing W-Tab binding.
; cabinet-switch is nice and all, but having it under W-Tab is not what I want.
; Unbind Super-Tab to get cycle-windows back.
(unbind-keys global-keymap "Super-Tab")
; Also unbind C-Tab since this is used for switching tabs in a browser.
(unbind-keys global-keymap "C-Tab")

;; Window manipulations
(bind-keys window-keymap
           ;; Move to an edge
           "W-c"   'pack-window-up
           "W-t"   'pack-window-down
           "W-h"   'pack-window-left
           "W-n"   'pack-window-right
           ;; Grow to an edge
           "W-C"   'grow-window-up
           "W-T"   'grow-window-down
           "W-H"   'grow-window-left
           "W-N"   'grow-window-right
           ;; Shrink till it overlaps with one less window
           "C-W-c" 'shrink-window-up
           "C-W-t" 'shrink-window-down
           "C-W-h" 'shrink-window-left
           "C-W-n" 'shrink-window-right
           ;; Move till it overlaps with one less window
           "C-W-C" 'yank-window-up
           "C-W-T" 'yank-window-down
           "C-W-H" 'yank-window-left
           "C-W-N" 'yank-window-right)


;; Run some applications
(add-hook 'after-initialization-hook
          (lambda ()
            (let ((sn (system-name)))
              (mapc
               (lambda (spec)
                 (when (string-looking-at (car spec) sn)
                   (apply mn-run-unless (cdr spec))))
               `(("erwin|pikus"       "^Opera/opera$"      "opera")
                 (""                  "^Emacs/emacs$"      "e")
                 ("erwin|pikus"       "/IRC$"              ,mn-irssi-command)
                 ("erwin"             "/MPD$"              ,mn-mpdshow-command)
                 (""                  "^Gkrellm/gkrellm$"  "gkrellm"))))
            (set-screen-viewport 0 0)))

;;}}}
;;{{{ Matcher

(define-frame-type-mapper
  (lambda (wnd type)
    (if (window-transient-p wnd)
        type
      'unframed)))

(require 'sawfish.wm.ext.match-window)

(define-match-window-setter 'location
  (lambda (wnd prop value)
    (declare (unused prop))
    (let ((x (nth 0 value)) (y (nth 1 value))
          (w (nth 2 value)) (h (nth 3 value))
          (v (nth 4 value)))
      ; Position
      (when (and x y)
        (when (< x 0) (setq x (+ (screen-width ) x)))
        (when (< y 0) (setq y (+ (screen-height) y)))
        (window-put wnd 'ignore-program-position #t)
        (move-window-to wnd x y))
      ; Dimensions
      (when (and w h)
        (resize-window-with-hints wnd w h))
      ; Viewport (maybe)
      (when v
        (set-screen-viewport     (1- v) 0)
        (set-window-viewport wnd (1- v) 0))
      ; Maximize (maybe)
      (when (and x w (= x 0) (= w (screen-width)))
        (window-put wnd 'queued-horizontal-maximize #t))
      (when (and y h (= y 0) (= h (screen-height)))
        (window-put wnd 'queued-horizontal-maximize #t)))))

(define-match-window-setter 'sticky-and-skip
  (lambda (w prop value)
    (declare (unused prop))
    (mapc (lambda (prp) (window-put w prp value))
          '(sticky sticky-viewport cycle-skip window-list-skip task-list-skip))))

(setq
 match-window-profile
 (let ((size (screen-size)))
   (mapcar (lambda (wnd-rule)
             (cons (car wnd-rule)
                   (apply nconc
                          (mapcar
                           (lambda (rule)
                             (and (string-match (car rule) size) (cdr rule)))
                           (cdr wnd-rule)))))
    '(;; Various terminals, size is specified via -g in command
      (((WM_CLASS . "/Term$"))
       ("1680x1050" (position  500 .   0))
       ("1024x.*"   (position  480 . 100))
       ("1600x1200" (position  492 .   0))
       ("3200x1200" (position 1120 . 100))
       (".*x1600"   (position  648 . 110))
       ("2400x1920" (position  494 . 100))
       ("3600x1080" (position 2900 . 110)))

      (((WM_CLASS . "/IRC$"))
       ("1680x1050" (position 1132 .  10))
       ("1024x768"  (position  480 .  10))
       ("1024x600"  (position  480 .   0))
       ("1600x1200" (position  492 .   0))
       ("3200x1200" (position 1120 .  10))
       (".*x1600"   (position  648 .  10))
       ("2400x1920" (position  494 .   0))
       ("3600x1080" (position 2900 .  10))
       (""          (sticky . #t) (sticky-viewport . #t)))

      (((WM_CLASS . "/MPD$" ))
       ("1680x1050" (position 1132 .   0))
       ("1024x.*"   (position  480 .   0))
       ("1600x1200" (position  492 .   0))
       ("3200x1200" (position 1120 .   0))
       (".*x1600"   (position  648 .   0))
       ("2400x1920" (position  494 .   0))
       ("3600x1080" (position 2900 .   0))
       (""          (focus-when-mapped . #f) (focus-mode . click)
                    (sticky-and-skip . #t)))

      ;; Opera
      (((WM_CLASS . "^Opera/opera$"))
       ("1680x1050" (location  500  350   1179  700  1))
       ("1920x1080" (location  500  350   1419  730  1))
       ("1024x600"  (location    0    0   1024  600  2))
       ("1024x768"  (location    0  368   1024  400  1))
       ("1600x1200" (location  600  500   1000  700  1))
       ("1200x1600" (location    0    0   1200 1600  2))
       ("2400x1600" (location 1200    0   1200 1600  1))
       ("3600x1080" (location    0    0   1920 1080  1) (maximize . both))
       ("2400x1920" (location  974    0   1426 1920  1)))

       ;; Emacs
      (((WM_CLASS . "^Emacs"))
       ("1680x1050" (location    0    0     80  105  1) (maximize . vertical))
       ("1920x1080" (location    0    0     80  108  1) (maximize . vertical))
       ("1024x600"  (location    0    0     78   46  1) (maximize . vertical))
       ("1024x768"  (location    0    0     80   76  1) (maximize . vertical))
       ("1600x1200" (location    0    0     80  120  1) (maximize . vertical))
       ("3200x1200" (location   72    0    170  118  1) (maximize . vertical))
       ("2400x1920" (location    0    0     80  192  1) (maximize . vertical))
       ("3600x1080" (location 1920    0    160  105  1) (maximize . vertical))
       (".*x1600"   (location    0    0     80  160  1) (maximize . vertical)))

      ;; Some windows do not like alpha
      (((WM_CLASS . "^Gimp/|^MPlayer/|^openttd/|^Inkscape/"))
       (""          (alpha . 1)))

      ;; GIMP
      (((WM_CLASS . "^Gimp/gimp$") (WM_WINDOW_ROLE . "^gimp-[^s]"))
       (""          (viewport 2 . 1) (group . Gimp) (alpha . 1))
       ("1200x1600|1024x600" (viewport 3 . 1)))

      (((WM_CLASS . "^Gimp/gimp$") (WM_WINDOW_ROLE . "^gimp-startup$"))
       (""          (place-mode . centered) (depth . 16)
                    (focus-when-mapped . #f) (never-focus . #t)
                    (sticky-and-skip . #t)))

      ;; Geeqie
      (((WM_ICON_NAME . "Geeqie$"))
       (""          (viewport 3 . 1) (alpha . 1))
       ("1200x1600" (viewport 4 . 1)))))))

;;}}}

; (restart)
