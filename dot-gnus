;;                           -*- mode: emacs-lisp; indent-tabs-mode: nil -*-
;; .gnus.el  -- GNUS configuration file
;; Copyright 2006 by Michal Nazarewicz (mina86/AT/mina86.com)
;; $Id: dot-gnus,v 1.1 2006/10/06 09:43:55 mina86 Exp $
;;
;;{{{ Main configration (name, email, fqdn, ...)

(setq
 user-full-name "Michal Nazarewicz"
 user-mail-address (eval-when-compile (concat "mina86" "@" "tlen.pl"))
 message-from-style 'angels
 gnus-local-domain "mina86.com"
 message-user-fqdn "erwin.mina86.com"
 gnus-user-agent (format "Gnus/%s Emacs/%s (Slckware Linux)"
                     gnus-version-number emacs-version))

;; Email addresses
(setq gnus-ignored-from-addresses
      (eval-when-compile
        (regexp-opt (mapcar (lambda (i) (concat (car i) "@" (cdr i)))
                            '(("mina86" . "tlen.pl")
                              ("mina86" . "mina86.com")
                              ("mina86" . "users.sf.net")
                              ("mina86" . "users.sourceforge.net")
                              ("mnazarew" . "mion.elka.pw.edu.pl")
                              ("mnazarewicz" . "gmail.com")
                              ("M.Nazarewicz" . "mion.elka.pw.edu.pl")))))
      message-alternative-emails gnus-ignored-from-addresses)

;; Passwords
(defvar mn-gnus-password-gmail-pop3 nil)
(defvar mn-gnus-password-gmail-smtp nil)
(defvar mn-gnus-password-mion-pop3 nil)
(defvar mn-gnus-password-mion-smtp nil)

(when (file-exists-p (concat gnus-home-directory "/.passwords.el"))
  (load (concat gnus-home-directory "/.passwords.el")))

;;}}}
;;{{{ Directories

(setq
 message-directory                (concat gnus-home-directory "/Mail")
 nndraft-directory                (concat gnus-home-directory "/drafts")
 nnml-use-compressed-files        t

 gnus-save-newsrc-file nil
 gnus-read-newsrc-file nil
 gnus-startup-file                (concat gnus-home-directory "/newsrc"))

;;}}}
;;{{{ Select methods & Mail sources

(setq
 gnus-select-method '(nntp "news.tpi.pl")
 gnus-always-read-dribble-file t

 gnus-secondary-select-methods '((nnml "")))


;; Mail sources

(eval-after-load "mail-source" '(require 'pop3))
(setq
 mail-source-delete-incoming t
 mail-sources
 `((pop :server "pop.gmail.com"
        :port 995
        :user "mnazarewicz"
        :password ,mn-gnus-password-gmail-pop3
        :connection ssl
        :leave t)
   (pop :server "mion.elka.pw.edu.pl"
        :port 995
        :user "mnazarew"
        :password ,mn-gnus-password-mion-pop3
        :connection ssl)))

;;}}}
;;{{{ Spliting & Spam

(spam-initialize)
(setq
 spam-use-bogofilter t

 gnus-spam-newsgroup-contents
 '((".*spam"      gnus-group-spam-classification-spam)
   ("nnml:mail.*" gnus-group-spam-classification-ham)
   ("nnml:list.*" gnus-group-spam-classification-ham))

 spam-junk-mailgroups '("nnml:spam" "spam")
 spam-split-group     "spam"

 gnus-ham-process-destinations  '(("*.spam"  "nnml:mail.misc"))
 gnus-spam-process-destinations '(("nnml:.*" "nnml:spam"))

 gnus-spam-proicess-newsgroups
 '(("nnml:.*" ((spam spam-use-bogofilter) (ham spam-use-bogofilter)))
   ("nnml:spam" ((ham spam-use-bogofilter)))))

;; Spliting

(setq
 nnmail-treat-duplicates 'delete
 nnmail-cache-accepted-message-ids t

 nnmail-split-methods 'nnmail-split-fancy
 nnmail-split-fancy
 `(| (: nnmail-split-fancy-with-parent)
     ("X-Gnus-Mail-Source" ".*mion.elka.pw.edu.pl"      "mail.mion")
     ("Content-Type"
      ,(eval-when-compile
         (concat "charset="
                 (regexp-opt '("big5" "iso-2022-jp" "ISO-2022-KR" "euc-kr"
                               "gb2312" "ks_c_5601-1987" "windows-1251") t)))
      junk)
     (: spam-split)
     ("Reply-To" "k02_a@staszic.waw.pl"                 "list.k02_a")
     (".*" "rootnode@lfa\\.pl"                          "mail.rootnode")
     (from "bugzilla-daemon@informatica.agh.edu.pl"  "mail.rootnode.bugzilla")
     (any "@grono\\.net"                                "mail.notify")
     (any "@\\(users\\.\\)?s\\(ourceforge\\|f\\)\\.net" "mail.sf")
     "mail.misc"))

;;}}}
;;{{{ Group parameters, Posting styles & Sending

;;{{{ Spelling

;; http://www.emacswiki.org/cgi-bin/wiki/GnusSpelling
(gnus-define-group-parameter
 dictionary
 :function-document
 "Return the dictionary used for the current group (if any)."
 :variable-document
 "Alist of regexps (to match group names) and default dictionary to use when composing a new message."
 :parameter-type '(string :tag "Dictionary")
 :parameter-document "\
     The default dictionary to use in the group.")

(defun gnus-setup-dictionary (&optional group)
  "Decide wich dictionary to use for group `group`."
  (interactive)
  (let ((dict (gnus-parameter-dictionary
               (or group (if (boundp 'gnus-newsgroup-name)
                             gnus-newsgroup-name "")))))
    (if dict (set (make-local-variable 'ispell-local-dictionary) dict))))

(add-hook 'gnus-message-setup-hook 'gnus-setup-dictionary)
(add-hook 'message-mode-hook (lambda () (flyspell-mode 1)))

;;}}}

(setq
; gnus-permanently-visible-groups "mail\\.misc"
 gnus-parameters
 '(("spam"             (total-expire . t)
                       (expire-wait  . 1))

   ("list\\."          (subscribed . t)
                       (total-expire . t)
                       (expire-wait . 14)
                       (dictionary . "polish"))
   ("list\\.k02_a"     (to-address . "k02_a@staszic.waw.pl")
                       (charset . "iso-8859-2"))

   ("mail"             (dictionary . "polish"))
   ("mail\\.notify"    (total-expire . t)
                       (expire-wait . 1))
   ("mail\\.rootnode"  (total-expire . t)
                       (expire-wait . 7))

   ("\\(?:alt\\.\\)?pl\\..*"  (dictionary . "polish"))
   (""                 (dictionary . "british"))))

(setq message-subscribed-address-functions
      '(gnus-find-subscribed-addresses))

;; Posting styles

(setq
 gnus-posting-styles
 '((".*"
    (signature-file "~/.signature-en")
    (x-url "http://mina86.com/"))
   ("^pl\\.\\|^alt\\.pl\\."
    (name "Micha³ Nazarewicz")
    (signature-file "~/.signature-pl"))
   ("^nnml:"
    (signature-file "~/.signature-pl"))
   ("^nnml:mail\\.mion"
    (address (concat "M.Nazarewicz" "@" "mion.elka.pw.edu.pl"))))

 gnus-message-archive-group '((unless (message-news-p) "nnml:mail.sent"))
 message-send-mail-function 'smtpmail-send-it)


;; http://www.pvv.ntnu.no/~terjeros/wiki/GnusGmail
(defun fs-change-smtp ()
  "Change the SMTP server according to the current from line."
  (save-excursion
    (let ((from (save-restriction
                  (message-narrow-to-headers) (message-fetch-field "from"))))
      (message
       "From is `%s', setting `smtpmail-smtp-server' to `%s'"
       from
       (cond
        ((string-match "pw\\.edu\\.pl" from)
         (setq smtpmail-starttls-credentials
               '(("mion.elka.pw.edu.pl" 587 nil nil))
               smtpmail-auth-credentials
               `(("mion.elka.pw.edu.pl" 587
                  "mnazarew" ,mn-gnus-password-mion-smtp))
               smtpmail-smtp-service 587
               smtpmail-smtp-server  "mion.elka.pw.edu.pl"))

        (t
         (setq smtpmail-starttls-credentials
               '(("smtp.gmail.com" 587 nil nil))
               smtpmail-auth-credentials
               `(("smtp.gmail.com" 587
                  "mnazarewicz" ,mn-gnus-password-gmail-smtp))
               smtpmail-smtp-service 587
               smtpmail-smtp-server  "smtp.gmail.com")))))))

(add-hook 'message-setup-hook 'fs-change-smtp)

;;}}}
;;{{{ Fix Subject in outgoing messages

;; http://www.emacswiki.org/cgi-bin/wiki/JorgenSchaefersGnusConfig
(add-hook 'message-header-setup-hook 'mn-fix-re-subject)
(defun mn-fix-re-subject ()
  (while (re-search-forward "^Subject: \\(\\([Oo][Dd][Pp]\\|[Rr][Ee]\\)\\(\\[[0-9]+\\]\\)?: \\)+" nil t)
    (replace-match "Subject: Re: ")))

;;}}}
;;{{{ Visualiasation

(setq
 gnus-treat-emphasize t
 gnus-treat-buttonize t
 gnus-treat-buttonize-head 'head
 gnus-treat-unsplit-urls 'last
 gnus-treat-leading-whitespace t
 gnus-treat-highlight-citation t
 gnus-treat-highlight-signature t
 gnus-treat-date-lapsed 'head
 gnus-treat-strip-trailing-blank-lines t
 gnus-treat-strip-cr t
 gnus-treat-overstrike t
 gnus-treat-display-x-face t
 gnus-treat-display-face t
 gnus-treat-display-smileys nil
 gnus-treat-x-pgp-sig 'head)

(require 'mm-decode)
(setq mm-discouraged-alternatives (list "text/html" "text/richtext"))

(setq gnus-ignored-mime-types '("text/x-vcard"))

;;}}}
;;{{{ Format lines

(setq
 gnus-group-line-format "%M%S%p%P%5y:%B%(%g%)%l %O\n"
 gnus-topic-line-format "%i%(%{%n%}%) %v\n"
 gnus-summary-line-format "%U%R%z%I%(%[%-16,16f%]: %s%)\n")

;;}}}
;;{{{ Bindings

(add-hook
 'gnus-group-mode-hook
 (lambda ()
   (define-key gnus-group-mode-map "\C-cf" 'gnus-topic-select-group)))

(add-hook
 'gnus-summary-mode-hook
 (lambda ()
   (define-key gnus-summary-mode-map "s" 'gnus-summary-mark-as-spam)
   (define-key gnus-summary-mode-map "\C-cf"
     (lambda () (interactive)
       (or (gnus-summary-show-thread) (gnus-summary-hide-thread))))
   (define-key gnus-summary-mode-map "\C-c\C-f"
     'gnus-summary-show-all-headers)
   (define-key gnus-summary-mode-map "c"
     (lambda () (interactive) (gnus-summary-catchup-and-exit nil t)))
   (define-key gnus-summary-mode-map "N"
     (lambda () (interactive)
       (gnus-summary-catchup nil t) (gnus-summary-next-group t)))))

;;}}}
;;{{{ Misc

(setq
 gnus-large-newsgroup 500
 gnus-thread-hide-subtree t
 gnus-summary-gather-subject-limit 'fuzzy
 gnus-interactive-exit nil)

(gnus-compile)
(setq gnus-topic-display-empty-topics nil)
(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

;; Daemon
;(gnus-demon-add-handler 'gnus-demon-scan-mail 15 15)
(gnus-demon-add-handler 'gnus-group-get-new-news 15 15)
(gnus-demon-init)

;;}}}
