## .shellrc                                             -*- shell-script -*-
# shellcheck shell=sh

# Not interactive?
case $- in *i*) : ;; *) return; esac

case ${HOST:-} in
'')
	host=$(hostname 2>/dev/null)
	if [ -z "$host" ]; then
		# My OpenWRT is missing hostname command and I don’t know where
		# to get it from.  Fortunately it has Python which I can use
		# instead.
		host=$(python -c 'import socket; print socket.gethostname()')
	fi
	host=${host%%.*}
	;;
*)
	host=${HOST%%.*}
esac

# Make sure basic variables are set.  This should be guaranteed by the
# environment (e.g. login) but I’ve seen those not being set in some weird
# circumstances (maybe it was Solaris?).
case $USER in
'')
	case $LOGNAME in
	'') USER=$(id -un); LOGNAME=$USER ;;
	*)  USER=$LOGNAME
	esac
	;;
*)
	LOGNAME=${LOGNAME:-$USER}
esac
case $HOME in '')
	HOME=$(eval echo ~"$USER")
esac

# Add ~/.local/bin and ~/.code/tinyapps to PATH and make sure relative paths are
# not present in it.  This needs to be done early so that ‘which’ calls below
# work correctly.
case ":$PATH:" in
*:"$HOME"/.local/bin:*)
	: ;;
*)
	if [ -d ~/code/tinyapps ]; then
		PATH=$HOME/code/tinyapps:$PATH
	fi
	if [ -d ~/.local/bin ]; then
		PATH=$HOME/.local/bin:$PATH
	fi
	if [ -d ~/.npm/packages/bin ]; then
		PATH=$HOME/.npm/packages/bin:$PATH
	fi
	PATH=$(echo ":$PATH:" | sed -e 's~::*\(\([^/:][^:]*\)\?:\)*~:~g' \
	                            -e 's/^::*//' -e 's/::*$//')
esac
export PATH

# When running as regular user I don’t want others reading my stuff.  When
# running as root though, I often create system files and those I want world to
# be able to read.  This is why I use 077 umask for normal users and 022 for
# root.
#
# While here, set timeout for root shells so that they get automatically closed
# if I forget do to it.  And also set PS1 the default PS1 which works for all
# shells.
case $USER in
root)
	umask 0022
	TMOUT=1200
	PS1='# '
	;;
*)
	umask 0077
	PS1='$ '
esac

case $SSH_CLIENT$SSH_CONNECTION in ?*)
	PS1="[$host]$PS1"
esac

unalias dir vdir l 2>/dev/null
unset LS_OPTIONS
alias ls='ls -vHFT0 --si --color=auto --time-style=long-iso'
alias ll='ls -o'

unalias md 2>/dev/null
md () {
	if [ $# -eq 0 ]; then
		echo usage: 'md dir [ dir ... ]' >&2
		return 1
	fi
	mkdir -p -- "$@" && \cd "$1" || return
}

# List directory or contents of a file
l () {
	if [ $# -eq 1 ] && [ -f "$1" ]; then
		less -- "$1"
	elif [ $# -eq 2 ] && [ "$1" = -- ] && [ -f "$2" ]; then
		less -- "$2"
	elif [ $# -eq 0 ] && [ ! -t 0 ]; then
		less
	else
		ls "$@"
	fi
}

alias rmd=rmdir

# Locale for en_GB changed such that date started showing 12-hour time which is
# a moronic.  Force C locale when running date.
alias date='LANG=C date'

if [ -x /usr/bin/ncal ]; then
	ncal() {
		[ $# -gt 0 ] || set -- -B1 -A2
		/usr/bin/ncal -M "$@"
	}
	cal() {
		[ $# -gt 0 ] || set -- -3
		/usr/bin/ncal -Mb "$@"
	}
elif cal -m >/dev/null 2>&1; then
	alias cal='cal -3m'
fi

if ! which xrun >/dev/null 2>&1; then
	xrun () { "$@" </dev/null >/dev/null 2>&1 & }
fi
if which cdiff >/dev/null 2>&1; then
	alias diff=cdiff
fi

if echo foo | grep --color=auto foo >/dev/null 2>/dev/null; then
	alias grep='grep --color=auto'
fi

# Powerful cd
if [ -e ~/.local/bin/pcd.sh ]; then
	# shellcheck source=../bin/pcd.sh
	. ~/.local/bin/pcd.sh
fi
# Bash interprets ’-=…’ as a flag so ‘--’ is needed
# but BusyBox complains about it so silence the warning.
alias -- -='cd -' 2>/dev/null

alias '+=git add'
alias '+u=git add -u'
alias '+p=git add -p'

alias @='for i in'

cargo() {
	set -- nice ~/.local/bin/cargo "$@"
	case $PWD in
	*/code/near/*)
		CARGO_PROFILE_RELEASE_LTO=false \
		CARGO_PROFILE_RELEASE_CODEGEN_UNITS=64 \
		CARGO_PROFILE_DEV_DEBUG=false \
			"$@"
		;;
	*)
		CARGO_PROFILE_DEV_DEBUG=false "$@"
	esac
}

# No need to set environment if it has already been set.
${MINA86RC:+return}
MINA86RC=ok
export MINA86RC

if which nano >/dev/null 2>&1; then
	EDITOR=nano
	VISUAL=nano
	export EDITOR VISUAL
fi

if less=$(which less 2>&1) && [ -n "$less" ]; then
	PAGER=$less
	LESS=-FMSRj4
	export PAGER LESS

	if [ -x ~/.local/bin/lesspipe ]; then
		eval "$(~/.local/bin/lesspipe --install-lesspipe)"
	fi

	if which tput >/dev/null 2>&1; then
	    LESS_TERMCAP_md=$(tput setaf 2)   # begin bold
	    LESS_TERMCAP_mb=$(tput setaf 1)   # begin blinking
	    LESS_TERMCAP_us=$(tput setaf 6)   # begin underline
	    LESS_TERMCAP_so=$(tput setab 3)   # begin stand-out-mode - info box
	    LESS_TERMCAP_se=$(tput sgr0)      # end stand-out-mode
	    LESS_TERMCAP_ue=$LESS_TERMCAP_se  # end underline
	    LESS_TERMCAP_me=$LESS_TERMCAP_se  # end mode
	else
	    esc=$(printf \\33)
	    LESS_TERMCAP_md=$esc'[36m'        # begin bold
	    LESS_TERMCAP_mb=$esc'[31m'        # begin blinking
	    LESS_TERMCAP_us=$esc'[33m'        # begin underline
	    LESS_TERMCAP_so=$esc'[38;43m'     # begin stand-out-mode - info box
	    LESS_TERMCAP_se=$esc'[0m'         # end stand-out-mode
	    LESS_TERMCAP_ue=$esc'[0m'         # end underline
	    LESS_TERMCAP_me=$esc'[0m'         # end mode
	    unset esc
	fi
	export LESS_TERMCAP_md LESS_TERMCAP_mb LESS_TERMCAP_us LESS_TERMCAP_so
	export LESS_TERMCAP_se LESS_TERMCAP_ue LESS_TERMCAP_me
fi
unset less

if [ -z "$LS_COLORS" ] && [ -f ~/.dir_colors ]; then
	eval "$(dircolors -b ~/.dir_colors)"
fi

# The encoding is ‘UTF-8’ on some systems and ‘utf8’ on others.  Furthermore, on
# some en_GB is not available but en_US is.  Pick locale which is available.
LANG=$(locale -a 2>/dev/null |grep -i '^en_\(GB\|US\)\.utf-\?8$'|sort|head -n1)
[ -n "$LANG" ] || LANG=C.UTF-8
LC_COLLATE=C

# /tmp is in RAM, don't save history between reboots
HISTFILE=/tmp/.$(id -un)-history
HISTCONTROL=ignorespace:erasedups
export LANG LC_COLLATE HISTFILE HISTCONTROL
unset MAILCHECK MAIL

# And finally, load local configuration.
if [ -e ~/.config/sh/local ]; then
	# shellcheck source=/dev/null
	. ~/.config/sh/local
fi
