## .shellrc                                             -*- shell-script -*-

# Not interactive?
case $- in *i*) : ;; *) return; esac

case $HOST in
'')
	host=$(hostname 2>/dev/null)
	if [ -z "$host" ]; then
		# My OpenWRT is missing hostname and I don’t quite know where to
		# get it from.  Fortunately it has Python so I can use it.
		host=$(python -c 'import socket; print socket.gethostname()')
	fi
	host=${host%%.*}
	;;
*)
	host=${HOST%%.*}
esac

# Make sure basic variables are set.  This should be guaranteed by the
# environment (e.g. login) but I’ve seen those not being set in some weird
# circumstances (maybe it was Solaris?).
case $USER in
'')
	case $LOGNAME in
	'') USER=$(id -un) ;;
	*)  USER=$LOGNAME
	esac
	;;
*)
	LOGNAME=${LOGNAME:-$USER}
esac
case $HOME in '')
	HOME=$(eval echo ~"$USER")
esac

# Add ~/.local/bin and ~/.code/tinyapps to PATH and make sure relative paths are
# not present in it.  This needs to be done early so that ‘which’ calls below
# work correctly.
case ":$PATH:" in
*:"$HOME"/.local/bin:*)
	: ;;
*)
	if [ -d ~/code/tinyapps ]; then
		PATH=$HOME/code/tinyapps:$PATH
	fi
	if [ -d ~/.local/bin ]; then
		PATH=$HOME/.local/bin:$PATH
	fi
	PATH=$(echo ":$PATH:" | sed -e 's~::*\(\([^/:][^:]*\)\?:\)*~:~g' \
	                            -e 's/^::*//' -e 's/::*$//')
esac
export PATH

# When running as regular user I don’t want others reading my stuff.  When
# running as root though, I often create system files and those I want world to
# be able to read.  This is why I use 077 umask for normal users and 022 for
# root.
#
# While here, set timeout for root shells so that they get automatically closed
# if I forget do to it.  And also set PS1 the default PS1 which works for all
# shells.
case $USER in
root)
	umask 0022
	TMOUT=1200
	PS1='# '
	;;
*)
	umask 0077
	PS1='$ '
esac

case $SSH_CLIENT$SSH_CONNECTION in ?*)
	PS1="[$host]$PS1"
esac

unalias ls dir vdir ll l 2>/dev/null
unset LS_OPTIONS
alias ls='ls -vhFT0 --si --color=auto'
alias ll='ls -l'

unalias md 2>/dev/null
md () {
	if [ $# -eq 0 ]; then
		echo usage: 'md dir [ dir ... ]' >&2
		return 1
	fi
	mkdir -p -- "$@" && \cd "$1"
}

# List directory or contents of a file
l () {
	if [ $# -eq 1 -a -f "$1" ]; then
		less -- "$1"
	elif [ $# -eq 2 -a x"$1" = x-- -a -f "$2" ]; then
		less -- "$2"
	else
		ls "$@"
	fi
}

alias rmd=rmdir
alias make='nice make'

if [ -x /usr/bin/ncal ]; then
	ncal() {
		[ $# -gt 0 ] || set -- -B1 -A2
		/usr/bin/ncal -M "$@"
	}
	cal() {
		[ $# -gt 0 ] || set -- -3
		/usr/bin/ncal -Mb "$@"
	}
elif cal -m >/dev/null 2>&1; then
	alias cal='cal -3m'
fi

if ! which xrun >/dev/null 2>&1; then
	xrun () { "$@" </dev/null >/dev/null 2>&1 & }
fi
if which cdiff >/dev/null 2>&1; then
	alias diff=cdiff
fi

if echo foo | grep --color=auto foo >/dev/null 2>/dev/null; then
	alias grep='grep --color=auto'
fi
alias fgrep='grep -F'
alias egrep='grep -E'

# Powerful cd
_cd_do() {
	if [ x"$2" != x- ] && [ -e "$2" ] && ! [ -d "$2" ]; then
		set -- "$1" "$(dirname "$2")"
	fi
	command cd "$1" -- "$2"
}

cd() {
	case "$#:$1" in
	1:-h)
		cat <<EOF
cd
    Move to home directory.
cd -P
    Resolve all symbolic links in \$PWD.
cd [-P] (<dir> | <file> | -)
    Move to <dir>, dirname(<file>), or \$OLDPWD; -P resolves all symlinks.
cd [-P] (<dir> | <file> | -) <command> [<args> ...]
    Run <command> in the directory and then come back.
EOF
		;;
	0:|1:--)
		command cd
		;;
	1:-P)
		command cd -P "${PWD}"
		;;
	1:*)
		_cd_do "-L" "$1"
		;;
	2:--)
		_cd_do "-L" "$2"
		;;
	2:-P)
		_cd_do "-P" "$2"
		;;
	*)
		if [ x"$1" == x-- ]; then
			shift
			set -- -L "$@"
		elif [ x"$1" != x-P ]; then
			set -- -L "$@"
		fi
		( _cd_do "$1" "$2" && shift 2 && exec "$@" )
	esac
}
# Bash interprets ’-=…’ as a flag so ‘--’ is needed but BusyBox complains about
# it so silence the warning.
alias -- -='command cd -' 2>/dev/null

alias +='git add'
alias +u='git add -u'
alias +p='git add -p'

alias @='for i in'

# No need to set environment if it has already been set.
${MINA86RC:+return}
MINA86RC=done
export MINA86RC

if [ -z "$EDITOR" ] && which nano >/dev/null 2>&1; then
	EDITOR=nano
	VISUAL=nano
	export EDITOR VISUAL
fi

if [ -n "$LESS" ] || which less >/dev/null 2>&1; then
	PAGER=less
	LESS=-FMSRj4
	if [ -x ~/.local/bin/lesspipe ]; then
		eval $(~/.local/bin/lesspipe --install-lesspipe)
	fi
fi

if which tput >/dev/null 2>&1; then
	LESS_TERMCAP_md=$(tput setaf 2)   # begin bold
	LESS_TERMCAP_mb=$(tput setaf 1)   # begin blinking
	LESS_TERMCAP_us=$(tput setaf 6)   # begin underline
	LESS_TERMCAP_so=$(tput setab 3)   # begin stand-out-mode - info box
	LESS_TERMCAP_se=$(tput sgr0)      # end stand-out-mode
	LESS_TERMCAP_ue=$LESS_TERMCAP_se  # end underline
	LESS_TERMCAP_me=$LESS_TERMCAP_se  # end mode
else
	esc=$(printf \\33)
	LESS_TERMCAP_md=$esc'[36m'        # begin bold
	LESS_TERMCAP_mb=$esc'[31m'        # begin blinking
	LESS_TERMCAP_us=$esc'[33m'        # begin underline
	LESS_TERMCAP_so=$esc'[38;43m'     # begin stand-out-mode - info box
	LESS_TERMCAP_se=$esc'[0m'         # end stand-out-mode
	LESS_TERMCAP_ue=$esc'[0m'         # end underline
	LESS_TERMCAP_me=$esc'[0m'         # end mode
	unset esc
fi
export LESS_TERMCAP_md LESS_TERMCAP_mb LESS_TERMCAP_us LESS_TERMCAP_so
export LESS_TERMCAP_se LESS_TERMCAP_ue LESS_TERMCAP_me

if [ -z "$LS_COLORS" ] && [ -f ~/.dir_colors ]; then
	eval "$(dircolors -b ~/.dir_colors)"
fi

FIGNORE=".o:~:.bak"
LC_COLLATE=C
LANG=en_GB.UTF-8
LC_MESSAGES=en_GB.UTF-8
# /tmp is in RAM, don't save history between reboots
HISTFILE=/tmp/.$(id -un)-history
HISTCONTROL=ignorespace:erasedups
export FIGNORE LANG LC_COLLATE LC_MESSAGES HISTFILE HISTCONTROL
unset MAILCHECK MAIL
case $host in erwin|tuptus)
	case $(uname -m) in
	x86_64) ARCH=x86_64 ;;
	*)      ARCH=i686
	esac
	export ARCH
	flags init
esac

# And finally, load local configuration.
if [ -e ~/.config/sh/local ]; then
	. ~/.config/sh/local
fi
