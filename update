#! /bin/sh

set -e


##
## Usage
##
usage () {
	cat <<EOF
usage: $0 [ <options> ] [ <files> ]
<options>:
  -f  update files in current directory from configuration files
  -t  update configuration files from files in current directory
  -B  do not make backups
  -y  assume "y" to all questions
EOF
	exit 1
}


##
## Parse arguments
##
DIRECTION=
INTERACTIVE=true
BACKUP=true

while [ x"${1#-}" != x"$1" ]; do
	ARG=${1#?}
	shift
	while [ -n "$ARG" ]; do
		case "$ARG" in
		f*) DIRECTION=from   ;;
		t*) DIRECTION=to     ;;
		B*) BACKUP=false     ;;
		y*) INTERACTIVE=false;;
		?*) usage            ;;
		esac
		ARG=${ARG#?}
	done
done


##
## Color handling
##
if ! which tput >/dev/null 2>&1; then
	tput () {
		return 0
	}
fi


##
## Print info
##

case "$DIRECTION" in
from)
	tput bold
	tput setaf 7
	echo 'Updating files in current directory from configuration files'
	tput sgr0
	;;
to)
	tput bold
	tput setaf 7
	echo 'Updating configuration files from files in current directory'
	tput sgr0
	;;
*)
	usage
esac


##
## File arguments
##
if [ $# -eq 0 ]; then
	match () {
		return 0
	}
else
	match () {
		for f in "$@"; do
			case "$FILE" in "$f")
				return 0
			esac
		done
		return 1
	}
fi


##
## Interactive asking
##
if $INTERACTIVE; then
	ask() {
		if which cdiff >/dev/null 2>&1; then
			cdiff -u "$2" "$1"
		else
			diff  -u "$2" "$1"
		fi

		while :; do
			tput bold
			tput setaf 7
			tput setab 4
			printf '%s:' "$2"
			tput sgr0
			tput setaf 7
			tput setab 4
			printf ' [yn] '
			tput sgr0
			read answer || exit 0
			case "$answer" in
			[yY]) return 0 ;;
			[nN]) return 1 ;;
			esac
		done
		echo
	}
else
	ask() {
		return 0
	}
fi


##
## Backup & copy
##
cp_backup() {
	if ! [ -e "$2" ]; then
		cp "$1" "$2"
		return 0
	elif ! cmp -s -- "$1" "$2" && ask "$1" "$2"; then
		if $BACKUP; then
			mv -- "$2" "$2~"
		fi
		cp "$1" "$2"
		return 0
	else
		return 1
	fi
}

cp_backup_from() {
	cp_backup "$2" "$1"
}

cp_backup_to() {
	cp_backup "$@"
}

##
## Template handling
##
TEMPFILE=$(umask 077; mktemp)
trap 'rm -f -- "$TEMPFILE"' 0

cp_tpl_from() {
	if ! [ -e "$1" ]; then
		sed "s#$HOME#{{HOME}}#g" <$2 >$1
	else
		sed "s#{{HOME}}#$HOME#g" <$1 >$TEMPFILE
		if cp_backup "$2" "$TEMPFILE"; then
			sed "s#$HOME#{{HOME}}#g" <$TEMPFILE >$1
		fi
	fi
}

cp_tpl_to() {
	if [ -e "$1" ]; then
		sed "s#{{HOME}}#$HOME#g" <$1 >$TEMPFILE
		cp_backup "$TEMPFILE" "$2" || true
	fi
}

##
## Emacs files handling
##
compile_el() {
	if [ -e "${1}c" ] &&
	   [ "$1" -nt  "${1}c" ] &&
	   file "${1}c" | grep -q 'Emacs.*byte-compiled' &&
	   [ -n "$(which emacs 2>/dev/null)" ]; then
		tput bold
		tput setaf 7
		echo "Compiling $1"
		tput sgr0
		emacs --batch -f batch-byte-compile "$1"
	fi
}


##
## Do the job
##
handle() {
	if match "$@"; then
		case "$DEST" in '~'*)   DEST=$HOME${DEST#'~'}; esac
		case "$DEST" in *@)     DEST=${DEST%@}${FILE##*/}; esac
		case "$DEST" in */.|*/) DEST=$DEST$FILE; esac

		if ! [ -d "${DEST%/*}" ]; then
			tput setaf 6
			echo "Skipping $FILE, ${DEST%/*}/ missing"
			tput sgr0
			return 0
		fi

		case "$FILE" in
		*.tpl)
			DEST=${DEST%.tpl}
			cp_tpl_$DIRECTION "$FILE" "$DEST" <&3
			;;
		*)
			cp_backup_$DIRECTION "$FILE" "$DEST" <&3 || true
		esac
		case "$DEST:$DIRECTION" in *.el:to)
			compile_el "$DEST"
		esac
	fi
}

if [ $DIRECTION = to ]; then
	mkdir -p ~/bin/libexec ~/.config/git ~/.config/xkb/keymapa \
	      ~/.config/xkb/symbols
fi

while read FILE DEST; do
	case $FILE in
	*'*'*)
		for FILE in $FILE; do
			if [ -f "$FILE" ]; then
				case $FILE in *~)
					continue
				esac
				_DEST=$DEST
				handle "$@"
				DEST=$_DEST
			fi
		done
		;;
	*)
		handle "$@"
	esac
done 3<&1 <<EOF
Xresources.tpl     ~/.
emacs/*            ~/.emacs.d/@
mail/*             ~/.mail/@
git/*              ~/.config/git/@
gtkrc-2.0          ~/.
inputrc            ~/.
irssi.theme        ~/.irssi/mina.theme
sawfishrc          ~/.sawfish/rc
statuses           ~/.irssi/
xinitrc            ~/.
bin/*              ~/
bin/libexec/*      ~/
sh/*               ~/.@
dir-colors         ~/.dir_colors
userjs/*.js        ~/.opera/
userjs/*.css       ~/.opera/usercss/@
opera/*.css        ~/.opera/usercss/@
opera/keyboard.ini ~/.opera/keyboard/@
opera/menu.ini     ~/.opera/menu/@
opera/toolbar.ini  ~/.opera/toolbar/@
vimperatorrc       ~/.vimperator/rc
xkb/keymapa/*      ~/.config/
xkb/symbols/*      ~/.config/
xkb/xinit-kbd      ~/bin/libexec/@
EOF
