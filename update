#! /bin/sh

set -e


##
## Usage
##
usage () {
	cat <<EOF
usage: $0 [ <options> ] [ <files> ]
<options>:
  -f  update files in current directory from configuration files
  -t  update configuration files from files in current directory
  -B  do not make backups
  -y  assume "y" to all questions
EOF
	exit 1
}


##
## Parse arguments
##
direction=
interactive=true
backup=true

while [ x"${1#-}" != x"$1" ]; do
	ARG=${1#?}
	shift
	while [ -n "$ARG" ]; do
		case "$ARG" in
		f*) direction=from   ;;
		t*) direction=to     ;;
		B*) backup=false     ;;
		y*) interactive=false;;
		?*) usage            ;;
		esac
		ARG=${ARG#?}
	done
done


##
## Color handling
##
if ! which tput >/dev/null 2>&1; then
	tput () {
		return 0
	}
fi


##
## Print info
##

case "$direction" in
from)
	tput bold
	tput setaf 7
	echo 'Updating files in current directory from configuration files'
	tput sgr0
	;;
to)
	tput bold
	tput setaf 7
	echo 'Updating configuration files from files in current directory'
	tput sgr0
	;;
*)
	usage
esac


##
## File arguments
##
if [ $# -eq 0 ]; then
	match () {
		return 0
	}
else
	match () {
		for f in "$@"; do
			case "$file" in "$f")
				return 0
			esac
		done
		return 1
	}
fi


##
## Interactive asking
##
if $interactive; then
	ask() {
		if which cdiff >/dev/null 2>&1; then
			cdiff -u "$2" "$1"
		else
			diff  -u "$2" "$1"
		fi

		while :; do
			tput bold
			tput setaf 7
			tput setab 4
			printf '%s:' "$2"
			tput sgr0
			tput setaf 7
			tput setab 4
			printf ' [yn] '
			tput sgr0
			read answer || exit 0
			case "$answer" in
			[yY]) return 0 ;;
			[nN]) return 1 ;;
			esac
		done
		echo
	}
else
	ask() {
		return 0
	}
fi


##
## Backup & copy
##
cp_backup() {
	if ! [ -e "$2" ]; then
		cp "$1" "$2"
		return 0
	elif ! cmp -s -- "$1" "$2" && ask "$1" "$2"; then
		if $backup; then
			mv -- "$2" "$2~"
		fi
		cp "$1" "$2"
		return 0
	else
		return 1
	fi
}

cp_backup_from() {
	cp_backup "$2" "$1"
}

cp_backup_to() {
	cp_backup "$@"
}

##
## Emacs files handling
##
compile_el() {
	if [ -e "${1}c" ] && [ "$1" -ot  "${1}c" ]; then
		return 0
	fi
	if [ -n "$(which emacs 2>/dev/null)" ]; then
		tput bold
		tput setaf 7
		echo "Compiling $1"
		tput sgr0
		emacs --batch -f batch-byte-compile "$1"
	fi
}


##
## Do the job
##
tempfile=$(umask 077; mktemp)
trap 'rm -f -- "$tempfile"' 0

handle() {
	if ! match "$@"; then
		return 0
	fi

	case "$dest" in '~'*)   dest=$HOME${dest#'~'}; esac
	case "$dest" in *@)     dest=${dest%@}${file##*/}; esac
	case "$dest" in */.|*/) dest=$dest$file; esac

	if ! [ -d "${dest%/*}" ]; then
		tput setaf 6
		echo "Skipping $file, ${dest%/*}/ missing"
		tput sgr0
		return 0
	fi

	case "$file" in
	*/dir-colors)
		# FIXME: Figure out more generic way of handling this instead of
		# having a custom code specifically for dir-colors.
		case $direction in to)
			dircolors - <$file >$tempfile
			cp_backup "$tempfile" "$dest" <&3 || true
		esac
		;;
	*)
		cp_backup_$direction "$file" "$dest" <&3 || true
	esac
	case "$dest:$direction" in *.el:to)
		compile_el "$dest"
	esac
}

case $direction in to)
	mkdir -p ~/.local/bin ~/.local/libexec ~/.emacs.d ~/.config/git \
	      ~/.config/xkb/keymap ~/.config/xkb/symbols ~/.urxvt
esac

while read _src _dest; do
	for file in $_src; do
		case "$file" in *\~|\#*|*\#|.*)
			continue
		esac
		if [ -f "$file" ]; then
			dest=$_dest
			handle "$@"
		elif ! [ -e "$file" ]; then
			echo "update: $file: repository file does not exist, skipping" >&2
		fi
	done
done 3<&1 <<EOF
emacs/*            ~/.emacs.d/@
mail/*             ~/.mail/@
git/*              ~/.config/git/@
inputrc            ~/.
irssi.theme        ~/.irssi/mina.theme
sawfishrc          ~/.sawfish/rc
statuses           ~/.irssi/
bin/*              ~/.local/
libexec/*          ~/.local/
sh/bashrc          ~/.@
sh/shellrc         ~/.@
sh/profile         ~/.@
sh/dir-colors      ~/.config/sh/@
vimperatorrc       ~/.vimperator/rc
x/Xresources       ~/.config/@
x/gtkrc-2.0        ~/.@
x/gtk-3.0.ini      ~/.config/gtk-3.0/settings.ini
x/xinitrc          ~/.@
x/xsettingsd       ~/.@
x/xserverrc        ~/.@
x/local.keymap     ~/.config/xkb/keymap/local
x/local.symbols    ~/.config/xkb/symbols/local
x/80-char.png      ~/.urxvt/@
EOF
