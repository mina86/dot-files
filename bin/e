#!/usr/bin/perl

use strict;
use warnings;

use Cwd;


sub check_exit_status($) {
	my ($cmd) = @_;
	if ($? & 127) {
		die $cmd . ': terminated with signal ' . ($? & 127) . "\n";
	} elsif ($? >> 8) {
		die $cmd . ': returned ' . ($? >> 8) . "\n";
	}
}

sub client(@) {
	# I’ve been having problems with IPC::Run and couldn’t debug them.
	# Implementing system run with proper stdin and stdout redirection
	# turned out to be the fastest solution.

	my $pid = fork();
	if (!defined $pid) {
		die "fork: $!\n";
	} elsif (!$pid) {
		open(STDIN, '<', '/dev/null') or die "/dev/null: $!\n";
		if ($_[0] eq '-q') {
			shift @_;
			open(STDOUT, '>', '/dev/null') or die "/dev/null: $!\n";
		}
		exec 'emacsclient', @_;
		die "emacsclient: $!\n";
	} elsif (waitpid($pid, 0) < 0) {
		die "wait: $!";
	} else {
		check_exit_status 'emacsclient';
	}
}


sub has_x() {
	defined $ENV{'DISPLAY'};
}


sub file_argument {
	my ($arg) = @_;
	if (-e $arg) {
		return ($arg);
	}

	# When showing diffs, git indicates old and new versions of the
	# file by using ‘a/’ and ‘b/’ prefixes.  Detect and strip them.
	if ($arg =~ m~^[ab]/(.+)$~ && -e $1) {
		return ($1);
	}

	# Lastly, try matching ‘«filename»:«line»:«column»:«text»’.  «filename»
	# and «text» may include colons and «line» and «column» are optional.
	# This makes the matching a bit tricky so we try various possible file
	# names if there are multiple colons in $arg.
	my @parts = split /:/, $arg, -1;
	for (my $i = @parts; --$i; ) {
		my $filename = join ':', @parts[0..($i - 1)];
		if (!-e $filename) {
			next;
		}
		my $line = $parts[$i] // '';
		my $column = $parts[$i + 1] // '';
		if ($line !~ /^\d+$/) {
			return ($filename);
		} elsif ($column =~ /^\d+$/) {
			return ("+$line:$column", $filename);
		} else {
			return ("+$line", $filename);
		}
	}
	($arg)
}


sub read_process {
	my ($cmd) = @_;
	open my $fd, '-|', @_ or die "$cmd : $!\n";
	my @lines;
	while (defined(my $line = <$fd>)) {
		chomp $line;
		push @lines, $line;
	}
	close $fd;
	check_exit_status($cmd);
	if (!@lines) {
		die "$cmd: exited with an empty result\n";
	}
	@lines
}


my ($windmove, $stdin) = (0, 0);
my @args;

while (@ARGV) {
	my $arg = shift @ARGV;
	if ($arg eq '-l') {
		--$windmove;
	} elsif ($arg eq '-r') {
		++$windmove;
	} elsif ($arg eq '-o') {
		$windmove = 'other';
	} elsif ($arg =~ /^-(find|which)$/) {
		push @args, read_process $1, @ARGV;
		last;
	} elsif ($arg eq '--') {
		push @args, @ARGV;
		last;
	} elsif ($arg eq '-') {
		$stdin = 1;
	} elsif ($arg =~ /^-./) {
		die "e: unknown option: $arg\n";
	} else {
		push @args, file_argument($arg);
	}
}

if ($windmove eq 'other') {
	$windmove = <<ELISP
(condition-case nil
    (windmove-right)
  (error (windmove-left)))
ELISP
} elsif ($windmove) {
	my $direction = $windmove < 0 ? 'left' : 'right';
	$windmove = <<ELISP
(condition-case nil
    (dotimes (n (abs $windmove))
      (windmove-$direction))
  (error nil))
ELISP
}


if ($stdin) {
	if (@args) {
		die "e: reading standard input is supported if there are no other arguments\n";
	}

	my $data;
	$data = join '', <STDIN>;
	$data =~ s/\\/\\\\/g;
	$data =~ s/"/\\"/g;
	$data = <<ELISP;
(let ((buf (generate-new-buffer "*pipe*")))
  (set-buffer buf)
  (insert "$data")
  (goto-char (point-min))
  $windmove
  (switch-to-buffer buf)
  (x-focus-frame nil))
ELISP
	@args = ('-e', $data);
	undef $windmove;
} elsif (!@args) {
	client has_x ? '-cna' : '-a', '';
	exit 0;
}


if ($windmove) {
	client '-q', '-ne', $windmove;
}

my @q = $stdin ? ('-q') : ();
client @q, has_x ? '-na' : '-ta', '', @args;
